// nargs-use: RAW, NICKEL, DESIG_INIT, MANUAL
// 10, 20, 30, 40, 50, 60, 70, 80, 90, 100

{{#RAW}}
{{#M}}
void function{{m}}(
    {{#N}}
    int x{{n}},
    {{/N}}
    int z
) {}

{{^BASELINE}}
void do_something{{m}}() {
    function{{m}}(
    {{#N}}
        {{n}},
    {{/N}}
        0
    );
}
{{/BASELINE}}
{{/M}}
{{/RAW}}


{{#DESIG_INIT}}
struct args {
{{#N}}
    int x{{n}};
{{/N}}
    int z;
};

{{#M}}
void function{{m}}(args) {}

{{^BASELINE}}
void do_something{{m}}() {
    function{{m}}({
        {{#N}}
        .x{{n}} = {{n}},
        {{/N}}
        .z = 0,
    });
}
{{/BASELINE}}
{{/M}}
{{/DESIG_INIT}}


{{#MANUAL}}
struct args {
{{#N}}
    int _x{{n}};
{{/N}}
    int _z;

    args& z(int z) {
        _z = z;
        return *this;
    }

{{#N}}
    args& x{{n}}(int x{{n}}) {
        _x{{n}} = x{{n}};
        return *this;
    }
{{/N}}
};

{{#M}}
void function{{m}}(args) {}

{{^BASELINE}}
void do_something{{m}}() {
    function{{m}}(
        args{}
        {{#N}}
        .x{{n}}({{n}})
        {{/N}}
        .z(0)
    );
}
{{/BASELINE}}
{{/M}}
{{/MANUAL}}


{{#NICKEL}}
#include <nickel/nickel.hpp>

{{#N}}
NICKEL_NAME(x{{n}}, x{{n}});
{{/N}}
NICKEL_NAME(z, z);

{{#M}}
auto function{{m}}() {
    return nickel::wrap(
        {{#N}}
        x{{n}},
        {{/N}}
        z
    )([](
        {{#N}}
        int x{{n}},
        {{/N}}
        int z
    ) {
        // Empty implementation
    });
}

{{^BASELINE}}
void do_something{{m}}() {
    function{{m}}()
        {{#N}}
        .x{{n}}({{n}})
        {{/N}}
        .z(0)
        ();
}
{{/BASELINE}}
{{/M}}

{{/NICKEL}}
